import sys

# Check Overlapping per person
def checkOverLaps(allocations,events_data):
    isOverlapping = False
    for i in range(len(allocations)):
        events_attended = allocations[i][1:]
        events_attended_details = [(events_data[j-1][0],events_data[j-1][1]) for j in events_attended]
        
        events_attended_details.sort()

        for j in range(1, len(events_attended_details)):
            if events_attended_details[j][0]<events_attended_details[j-1][1]:
                isOverlapping = True
                break
        
        if isOverlapping:
            break

    return isOverlapping

# Check event cap
def checkEventCap(allocations, events_data):
    actualEvent = [0]*M 
    for i in range(len(allocations)):
        for j in range(1, len(allocations[i])):
            actualEvent[allocations[i][j]-1] += 1

    eventCapBreached = False

    for i in range(M):
        if actualEvent[i]>events_data[i][2]:
            eventCapBreached = True 
            break 
    
    return eventCapBreached

# Calculate the satisfaction
def calculateSatisfaction(allocations, clients_pref):
    score = 0

    for i in range(len(allocations)):
        events_attended = allocations[i][1:]
        for j in events_attended:
            score+=clients_pref[i][j-1]
    return score 



# Input Manager
# path to test_case and output
test_case = sys.argv[1] 
output = sys.argv[2]

terminal = sys.stdin

sys.stdin = open(test_case, 'r') 

# Test Case
N,M = [int(i) for i in input().split()]                               # Number of clients and events
clients_pref = []                                                     # Preference data of each client

for i in range(N):                 
    clients_pref.append([int(i) for i in input().split()])

events_data = []                                                      # Events details of each event

for i in range(M):
    events_data.append([int(i) for i in input().split()])



sys.stdin = open(output, 'r')
# Output
allocations = []                                                      # Output generated by each event

for i in range(N):
    allocations.append([int(i) for i in input().split()])


sys.stdin = terminal


# Driver Code
if not checkEventCap(allocations, events_data):
    if not checkOverLaps(allocations, events_data):
        print("Your satisfaction level is: ",calculateSatisfaction(allocations, clients_pref))
    else:
        print("Clients Schedule Overlapping")
else:
    print("Event Cap breached")